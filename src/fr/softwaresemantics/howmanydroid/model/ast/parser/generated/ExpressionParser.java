package fr.softwaresemantics.howmanydroid.model.ast.parser.generated;

import fr.softwaresemantics.howmanydroid.model.ast.NegExpr;
import java.util.ArrayList;
import fr.softwaresemantics.howmanydroid.model.ast.MinusExpr;
import fr.softwaresemantics.howmanydroid.model.ast.FuncExpr;
import fr.softwaresemantics.howmanydroid.model.ast.PlusExpr;
import beaver.*;
import fr.softwaresemantics.howmanydroid.model.ast.MultExpr;
import fr.softwaresemantics.howmanydroid.model.ast.ErrExpr;
import fr.softwaresemantics.howmanydroid.model.ast.DivExpr;
import fr.softwaresemantics.howmanydroid.model.ast.VarExpr;
import fr.softwaresemantics.howmanydroid.model.ast.ExponExpr;
import fr.softwaresemantics.howmanydroid.model.ast.NumExpr;
import fr.softwaresemantics.howmanydroid.model.ast.Expr;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "expr.grammar".
 */
public class ExpressionParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short MINUS = 1;
		static public final short LPAREN = 2;
		static public final short ALPHA09NAME = 3;
		static public final short NUMBER = 4;
		static public final short EXPON = 5;
		static public final short MULT = 6;
		static public final short DIV = 7;
		static public final short RPAREN = 8;
		static public final short PLUS = 9;
		static public final short COMMA = 10;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9ojahbImq0CXdyd8N4En#OCHmeAYXGK51GK351mPPZGKV0sF3Bt3UBRjJBZcL36Evz#oTg" +
		"nj5fBkZLJMrtLjU2shPQsD2WZUoIQpJTKy$mzKQP2gyhdfijgQb4hMgV61gJggAU#bkn1Qz" +
		"gKbD17aygbJMA7FOzIel$oNO$ocA$HVMDk6hwUqM5AZKwSLBbILfYKDBnJVBPBqGwCOGHNi" +
		"6jcF#WUPB3l#m#2kdy84$TRS0qtS09d$luK2XXuNBZchiUkvwuNhfUkuqgzewbVXJwjicTI" +
		"yOT#DjalS1hxXY$uX0zxZxctQ5#ZVO5dUmhziPBuJyqI9ZZD1MrmrtL8c5H9$m$K9K4L");

	private final Action[] actions;

	public ExpressionParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = expr
			new Action() {	// [1] expr = expr.a MULT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new MultExpr (a, b);
				}
			},
			new Action() {	// [2] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new DivExpr  (a, b);
				}
			},
			new Action() {	// [3] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new PlusExpr (a, b);
				}
			},
			new Action() {	// [4] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new MinusExpr(a, b);
				}
			},
			new Action() {	// [5] expr = expr.a EXPON expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new ExponExpr(a,b);
				}
			},
			new Action() {	// [6] expr = MINUS expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new NegExpr  (e);
				}
			},
			new Action() {	// [7] expr = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new NumExpr  (n);
				}
			},
			new Action() {	// [8] expr = LPAREN pexpr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
				}
			},
			new Action() {	// [9] expr = ALPHA09NAME.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					 return new VarExpr  (a);
				}
			},
			new Action() {	// [10] expr = ALPHA09NAME.a LPAREN param.p RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final FuncExpr p = (FuncExpr) _symbol_p.value;
					 p.name=a; return p;
				}
			},
			new Action() {	// [11] param = param.p COMMA expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final FuncExpr p = (FuncExpr) _symbol_p.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					 p.parameters.add(e); return p;
				}
			},
			new Action() {	// [12] param = expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 FuncExpr f= new FuncExpr(); f.parameters.add(e); return f;
				}
			},
			Action.RETURN,	// [13] pexpr = expr
			new Action() {	// [14] pexpr = error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new ErrExpr();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
